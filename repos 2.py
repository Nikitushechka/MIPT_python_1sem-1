import pygame
from pygame.draw import *

pygame.init()
pygame.font
FPS = 30
screen = pygame.display.set_mode((1500, 870))
x_1=-150
y_1=0
n_1=1
s_1=0
s_2=128
s_3=0
e_1=144
e_2=238
e_3=144
h_1=255
h_2=255
h_3= 0
x_2=550
y_2=0
n_2=1
s_4=255
s_5=69
s_6=0
e_4=0
e_5=191
e_6=255
h_4=148
h_5=0
h_6=211
rect(screen, (211, 211, 211), (0, 0, 1500, 870))      
def hands (x,y,n):
    '''
    Функция рисует руки человека.
    x,y - значения, на которые будут меняться координаты рук от заданных значений
    n - во сколько раз руки будут больше или меньше заданных размеров
    '''
    polygon(screen, (255, 228, 196), [((244 + x)/n, (699+y)/n),
                                      ((286 + x)/n, (689+y)/n),
                                      ((210 + x)/n, (145+y)/n),
                                      ((168 + x)/n, (154+y)/n),
                                      ((244 + x)/n, (699+y)/n)]) #Руки
    polygon(screen, (255, 228, 196), [((860 + x)/n, (698+y)/n),
                                      ((915 + x)/n, (160+y)/n),
                                      ((870 + x)/n, (158+y)/n),
                                      ((820 + x)/n, (678+y)/n),
                                      ((860 + x)/n, (698+y)/n)]) 

    ellipse(screen, (255, 228, 196), ((130 + x)/n, (37+y)/n, 108/n, 129/n))
    ellipse(screen, (255, 248, 220), ((130 + x)/n, (37+y)/n, 108/n, 129/n), 1)
    ellipse(screen, (255, 228, 196), ((837 + x)/n, (45+y)/n, 128/n,134/n))     #Ладони
    ellipse(screen, (255, 248, 220), ((837 + x)/n, (45+y)/n, 128/n, 134/n), 1)  

def body (x,y,s1,s2,s3,n):
    '''
    Функция рисует тело человека.
    x,y - значения, на которые будут меняться координаты тела от заданных значений
    s1,s2,s3 - значения, задающие цвет тела
    n - во сколько раз тело будет больше или меньше заданного размера
    '''
    circle(screen, (s1, s2, s3), ((550 + x)/n, (938+y)/n), 296/n)  

def shoulders (x,y,s1,s2,s3,n):
    '''
    Функция рисует плечи человека.
    x,y - значения, на которые будут меняться координаты плеч от заданных значений
    s1,s2,s3 - значения, задающие цвет плеч
    n - во сколько раз плечи будут больше или меньше заданного размера
    '''
    polygon(screen, (s1, s2, s3), [((774 + x)/n, (848+y)/n), ((716 + x)/n, (745+y)/n),
                                   ((785 + x)/n, (651+y)/n), ((887 + x)/n, (695+y)/n),
                                   ((881 + x)/n, (819+y)/n),((774 + x)/n, (848+y)/n)])
    polygon(screen, (0, 0, 0), [((774 + x)/n, (848+y)/n), ((716 + x)/n, (745+y)/n),
                                ((785 + x)/n, (651+y)/n), ((887 + x)/n, (695+y)/n),
                                ((881 + x)/n, (819+y)/n), ((774 + x)/n, (848+y)/n)], 1)
    polygon(screen, (s1, s2, s3), [((333 + x)/n, (843+y)/n), ((223 + x)/n, (828+y)/n),
                                   ((211 + x)/n, (709+y)/n), ((313 + x)/n, (651+y)/n),
                                   ((388 + x)/n, (735+y)/n), ((333 + x)/n, (843+y)/n)])
    polygon(screen, (0, 0, 0), [((333 + x)/n, (843+y)/n), ((223 + x)/n, (828+y)/n),
                                ((211 + x)/n, (709+y)/n), ((313 + x)/n, (651+y)/n),
                                ((388 + x)/n, (735+y)/n), ((333 + x)/n, (843+y)/n)], 1)

def had (x,y,n):
    '''
    Функция рисует голову человека.
    x,y - значения, на которые будут меняться координаты головы от заданных значений
    n - во сколько раз голова будет больше или меньше заданного размера
    '''
    circle(screen, (255, 228, 196), ((550 + x)/n, (495+y)/n), 280/n)   

def eye1 (x,y,e1,e2,e3,n):
    '''
    Функция рисует левый глаз человека.
    x,y - значения, на которые будут меняться координаты левого глаза от заданных значений
    e1,e2,e3 - значения, задающие цвет глаз
    n - во сколько раз левый глаз будет больше или меньше заданного размера
    '''
    circle(screen, (e1, e2, e3), ((460 + x)/n, (444+y)/n), 58/n) 
    circle(screen, (0, 0, 0), ((460 + x)/n, (444+y)/n), 58/n, 1)
    circle(screen, (0, 0, 0), ((459 + x)/n, (449+y)/n), 17/n)

def eye2 (x,y,e1,e2,e3,n):
    '''
    Функция рисует правый глаз человека.
    x,y - значения на которые будут меняться координаты правого глаза от заданных значений
    e1,e2,e3 - значения задающие цвет глаз
    n - во сколько раз правый глаз будет больше или меньше заданного размера
    '''
    circle(screen, (e1, e2, e3), ((637 + x)/n, (444+y)/n), 58/n) 
    circle(screen, (0, 0, 0), ((637 + x)/n, (444+y)/n), 58/n, 1)
    circle(screen, (0, 0, 0), ((641 + x)/n, (449+y)/n), 17/n)

def nose (x,y,n):
    '''
    Функция рисует нос человека.
    x,y - значения на которые будут меняться координаты носа от заданных значений
    n - во сколько раз нос будет больше или меньше заданного размера
    '''
    polygon(screen, (139, 69, 19), [((550 + x)/n, (550+y)/n), ((525 + x)/n, (508+y)/n),
                                    ((575 + x)/n, (508+y)/n), ((550 + x)/n, (550+y)/n)])   
    polygon(screen, (139, 0, 0), [((550 + x)/n, (550+y)/n), ((525 + x)/n, (508+y)/n),
                                  ((575 + x)/n, (508+y)/n), ((550 + x)/n, (550+y)/n)], 1)

def mouth (x,y,n):
    '''
    Функция рисует рот человека.
    x,y - значения, на которые будут меняться координаты рта от заданных значений
    n - во сколько раз нос будет больше или меньше заданного размера
    '''
    polygon(screen, (255, 25, 0), [((400 + x)/n, (570+y)/n), ((550 + x)/n, (665+y)/n),    
                                   ((700 + x)/n, (570+y)/n), ((400 + x)/n, (570+y)/n)])
    polygon(screen, (139, 0, 0), [((400 + x)/n, (570+y)/n), ((550 + x)/n, (665+y)/n),
                                  ((700 + x)/n, (570+y)/n), ((400 + x)/n, (570+y)/n)], 1)
def hair (x,y,h1,h2,h3,n):
    '''
    Функция рисует волосы человека.
    x,y - значения, на которые будут меняться координаты волос от заданных значений
    h1,h2,h3 - значения, задающие цвет волос
    n - во сколько раз волосы будут больше заданного размера
    ''' 
    polygon(screen, (h1, h2, h3), [((312 + x)/n, (350+y)/n), ((275 + x)/n, (275+y)/n),
                                   ((356 + x)/n, (281+y)/n), ((312 + x)/n, (350+y)/n)])
    polygon(screen, (0, 0, 0), [((312 + x)/n, (350+y)/n), ((275 + x)/n, (275+y)/n),
                                ((356 + x)/n, (281+y)/n), ((312 + x)/n, (350+y)/n)],1)
    polygon(screen, (h1, h2, h3), [((338 + x)/n, (300+y)/n), ((319 + x)/n, (223+y)/n),
                                   ((408 + x)/n, (255+y)/n), ((338 + x)/n, (300+y)/n)])
    polygon(screen, (0, 0, 0), [((338 + x)/n, (300+y)/n), ((319 + x)/n, (223+y)/n),
                                ((408 + x)/n, (255+y)/n), ((338 + x)/n, (300+y)/n)],1)
    polygon(screen, (h1, h2, h3), [((382 + x)/n, (266+y)/n), ((377 + x)/n, (184+y)/n),
                                   ((455 + x)/n, (225+y)/n), ((382 + x)/n, (266+y)/n)])
    polygon(screen, (0, 0, 0), [((382 + x)/n, (266+y)/n), ((377 + x)/n, (184+y)/n),
                                ((455 + x)/n, (225+y)/n), ((382 + x)/n, (266+y)/n)],1)
    polygon(screen, (h1, h2, h3), [((424 + x)/n, (242+y)/n), ((430 + x)/n, (160+y)/n),
                                   ((500 + x)/n, (210+y)/n), ((424 + x)/n, (242+y)/n)])
    polygon(screen, (0, 0, 0), [((424 + x)/n, (242+y)/n), ((430 + x)/n, (160+y)/n),
                                   ((500 + x)/n, (210+y)/n), ((424 + x)/n, (242+y)/n)],1)
    polygon(screen, (h1, h2, h3), [((475 + x)/n, (220+y)/n), ((504 + x)/n, (145+y)/n),
                                   ((554 + x)/n, (210+y)/n), ((475 + x)/n, (220+y)/n)])  
    polygon(screen, (0, 0, 0), [((475 + x)/n, (220+y)/n), ((504 + x)/n, (145+y)/n),
                                   ((554 + x)/n, (210+y)/n), ((475 + x)/n, (220+y)/n)], 1)
    polygon(screen, (h1, h2, h3), [((533 + x)/n, (217+y)/n), ((558 + x)/n, (150+y)/n),
                                   ((613 + x)/n, (221+y)/n), ((533 + x)/n, (217+y)/n)])
    polygon(screen, (0, 0, 0), [((533 + x)/n, (217+y)/n), ((558 + x)/n, (150+y)/n),
                                   ((613 + x)/n, (221+y)/n), ((533 + x)/n, (217+y)/n)],1)
    polygon(screen, (h1, h2, h3), [((600 + x)/n, (227+y)/n), ((639 + x)/n, (157+y)/n),
                                   ((667 + x)/n, (227+y)/n), ((600 + x)/n, (227+y)/n)])
    polygon(screen, (0, 0, 0), [((600 + x)/n, (227+y)/n), ((639 + x)/n, (157+y)/n),
                                ((667 + x)/n, (227+y)/n), ((600 + x)/n, (227+y)/n)],1)
    polygon(screen, (h1, h2, h3), [((653 + x)/n, (228+y)/n), ((725 + x)/n, (192+y)/n),
                                   ((721 + x)/n, (273+y)/n), ((653 + x)/n, (228+y)/n)])
    polygon(screen, (0, 0, 0), [((653 + x)/n, (228+y)/n), ((725 + x)/n, (192+y)/n),
                                   ((721 + x)/n, (273+y)/n), ((653 + x)/n, (228+y)/n)],1)
    polygon(screen, (h1, h2, h3), [((704 + x)/n, (249+y)/n), ((783 + x)/n, (230+y)/n),
                                   ((759 + x)/n, (308+y)/n), ((704 + x)/n, (249+y)/n)])
    polygon(screen, (0, 0, 0), [((704 + x)/n, (249+y)/n), ((783 + x)/n, (230+y)/n),
                                ((759 + x)/n, (308+y)/n), ((704 + x)/n, (249+y)/n)], 1)
    polygon(screen, (h1, h2, h3), [((746 + x)/n, (282+y)/n), ((827 + x)/n, (279+y)/n),
                                   ((790 + x)/n, (351+y)/n), ((746 + x)/n, (282+y)/n)])
    polygon(screen, (0, 0, 0), [((746 + x)/n, (282+y)/n), ((827 + x)/n, (279+y)/n),
                                ((790 + x)/n, (351+y)/n), ((746 + x)/n, (282+y)/n)], 1) 
def human(x,y,e1,e2,e3,s1,s2,s3,h1,h2,h3,n):
    '''
    Функция рисует человека.
    x,y - значения, на которые будут меняться координаты человека от заданных значений
    s1,s2,s3 - параметры, задающие цвет плеч и тела человека
    e1,e2,e3 - параметры, задающие цвет глаз человека
    h1,h2,h3 - параметры, задающие цвет волос человека
    n - во сколько раз человек будет больше или меньше заданного размера
    '''
    hands(x,y,n)
    body(x,y,s1,s2,s3,n)
    had(x,y,n)
    shoulders(x,y,s1,s2,s3,n)
    eye1(x,y,e1,e2,e3,n)
    eye2 (x,y,e1,e2,e3,n)
    nose(x,y,n)
    mouth(x,y,n)
    hair (x,y,h1,h2,h3,n)

human(x_1,y_1,e_1,e_2,e_3,s_1,s_2,s_3,h_1,h_2,h_3,n_1)
human(x_2,y_2,e_4,e_5,e_6,s_4,s_5,s_6,h_4,h_5,h_6,n_2)

rect(screen, (127, 255, 0), (2, 2, 1498, 110))
rect(screen, (0, 0, 0), (2, 2, 1498, 110), 1)


f1 = pygame.font.Font(None, 140)
text1 = f1.render('PYTHON is REALLY AMAZING!', True,
                  (0, 0, 0))
screen.blit(text1, (10, 5))

pygame.display.update()
clock = pygame.time.Clock()
finished = False

while not finished:
    clock.tick(FPS)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            finished = True

pygame.quit()
